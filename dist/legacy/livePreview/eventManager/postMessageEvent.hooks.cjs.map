{"version":3,"sources":["../../../../src/livePreview/eventManager/postMessageEvent.hooks.ts"],"sourcesContent":["import { isOpeningInNewTab } from \"../../common/inIframe\";\nimport Config, { setConfigFromParams } from \"../../configManager/configManager\";\nimport { PublicLogger } from \"../../logger/logger\";\nimport { ILivePreviewWindowType } from \"../../types/types\";\nimport { addParamsToUrl, isOpeningInTimeline } from \"../../utils\";\nimport livePreviewPostMessage from \"./livePreviewEventManager\";\nimport { LIVE_PREVIEW_POST_MESSAGE_EVENTS } from \"./livePreviewEventManager.constant\";\nimport {\n    HistoryLivePreviewPostMessageEventData,\n    LivePreviewInitEventResponse,\n    OnChangeLivePreviewPostMessageEventData,\n    OnChangeLivePreviewPostMessageEventTypes,\n} from \"./types/livePreviewPostMessageEvent.type\";\n\n/**\n * Registers a post message event listener for history-related events.\n * The listener handles events for forward, backward, and reload actions on the browser history.\n */\nexport function useHistoryPostMessageEvent(): void {\n    livePreviewPostMessage?.on<HistoryLivePreviewPostMessageEventData>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.HISTORY,\n        (event) => {\n            switch (event.data.type) {\n                case \"forward\": {\n                    window.history.forward();\n                    break;\n                }\n                case \"backward\": {\n                    window.history.back();\n                    break;\n                }\n                case \"reload\": {\n                    window.history.go();\n                    break;\n                }\n                default: {\n                    const exhaustiveCheck: never = event.data.type;\n                    throw new Error(`Unhandled event: ${exhaustiveCheck}`);\n                }\n            }\n        }\n    );\n}\n\n/**\n * Registers a post message event listener for updating the entry in the live preview.\n */\nexport function useOnEntryUpdatePostMessageEvent(): void {\n    livePreviewPostMessage?.on<OnChangeLivePreviewPostMessageEventData>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.ON_CHANGE,\n        (event) => {\n            try {\n                const { ssr, onChange } = Config.get();\n                const event_type = event.data._metadata?.event_type;\n                console.log(\"event\", event.data);\n                setConfigFromParams({\n                    live_preview: event.data.hash,\n                });\n\n                // This section will run when there is a change in the entry and the website is CSR\n                if (!ssr && !event_type) {\n                    onChange();\n                } \n\n                if(isOpeningInNewTab()) {\n                    if(!window) {\n                        PublicLogger.error(\"window is not defined\");\n                        return;\n                    };\n                    \n                    // This section will run when there is a change in the entry and the website is SSR\n                    if(ssr && !event_type) {\n                        if(window.location.href.includes(\"live_preview\") && window.location.href.includes(\"content_type_uid\") && window.location.href.includes(\"entry_uid\")) {\n                            console.log(\" reload the page only\");\n                            window.location.reload();\n                        } else {\n                            const url = new URL(window.location.href);\n                            url.searchParams.set(\"live_preview\", event.data.hash);\n                            url.searchParams.set(\"content_type_uid\", Config.get().stackDetails.contentTypeUid || event.data.content_type_uid || \"\");\n                            url.searchParams.set(\"entry_uid\", Config.get().stackDetails.entryUid || event.data.entry_uid || \"\");\n                            console.log(\" new url\", url.toString());\n                            window.location.href = url.toString();\n                        }\n                    }\n    \n                    // This section will run when the hash changes and the website is SSR or CSR\n                    if(event_type === OnChangeLivePreviewPostMessageEventTypes.HASH_CHANGE){\n                        const newUrl = new URL(window.location.href);\n                        newUrl.searchParams.set(\"live_preview\", event.data.hash);\n                        window.history.pushState({}, \"\", newUrl.toString());\n                    }\n    \n                    // This section will run when the URL of the page changes\n                    if(event_type === OnChangeLivePreviewPostMessageEventTypes.URL_CHANGE && event.data.url){\n                        window.location.href = event.data.url;\n                    }\n                }\n\n                \n            } catch (error) {\n                PublicLogger.error(\"Error handling live preview update:\", error);\n                return;\n            }\n        }\n    );\n}\n\nexport function sendInitializeLivePreviewPostMessageEvent(): void {\n    livePreviewPostMessage\n        ?.send<LivePreviewInitEventResponse>(\n            LIVE_PREVIEW_POST_MESSAGE_EVENTS.INIT,\n            {\n                config: {\n                    shouldReload: Config.get().ssr,\n                    href: window.location.href,\n                    sdkVersion: process?.env?.PACKAGE_VERSION,\n                    mode: Config.get().mode,\n                },\n            }\n        )\n        .then((data) => {\n            const {\n                contentTypeUid,\n                entryUid,\n                windowType = ILivePreviewWindowType.PREVIEW,\n            } = data || {};\n\n            // TODO: This is a fix for the issue where we were calling sending init in the builder\n            // Let's remove this condition when we fix it.\n            if (Config?.get()?.windowType && Config.get().windowType === ILivePreviewWindowType.BUILDER) {\n                return;\n            }\n\n            if (contentTypeUid && entryUid) {\n                // TODO: we should not use this function. Instead we should have sideEffect run automatically when we set the config.\n                setConfigFromParams({\n                    content_type_uid: contentTypeUid,\n                    entry_uid: entryUid,\n                });\n            } else {\n                // TODO: add debug logs that runs conditionally\n                // PublicLogger.debug(\n                //     \"init message did not contain contentTypeUid or entryUid.\"\n                // );\n            }\n            if (Config.get().ssr || isOpeningInTimeline() || isOpeningInNewTab()) {\n                addParamsToUrl();\n            }\n            Config.set(\"windowType\", windowType);\n\n            // set timeout for client side (use to show warning: You are not editing this page)\n            if (!Config.get().ssr) {\n                setInterval(() => {\n                    sendCurrentPageUrlPostMessageEvent();\n                }, 1500);\n            }\n\n            useHistoryPostMessageEvent();\n            useOnEntryUpdatePostMessageEvent();\n        })\n        .catch((e) => {\n            // TODO: add debug logs that runs conditionally\n            // PublicLogger.debug(\"Error while sending init message\", e);\n        });\n}\n\nfunction sendCurrentPageUrlPostMessageEvent(): void {\n    livePreviewPostMessage\n        ?.send(LIVE_PREVIEW_POST_MESSAGE_EVENTS.CHECK_ENTRY_PAGE, {\n            href: window.location.href,\n        })\n        .catch(() => {\n            // TODO: add debug logs that runs conditionally\n        });\n}\n"],"mappings":"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","names":["import_livePreviewEventManager","livePreviewPostMessage","_a","Config"]}