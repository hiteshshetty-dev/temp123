{"version":3,"sources":["../../../../../../src/visualBuilder/components/Collab/ThreadPopup/ThreadBody.tsx"],"sourcesContent":["/** @jsxImportSource preact */\nimport React from \"preact/compat\";\nimport { IMessageDTO, IUserState } from \"../../../types/collab.types\";\nimport ThreadBodyLoader from \"./loader/ThreadBody\";\nimport CommentCard from \"./CommentCard\";\nimport classNames from \"classnames\";\nimport { collabStyles, flexAlignCenter } from \"../../../collab.style\";\nimport { IThreadBody } from \"../../../types/collab.types\";\n\nconst Loader: React.FC<{ isLoading: boolean }> = ({ isLoading, children }) => {\n    return isLoading ? (\n        <ThreadBodyLoader key=\"collab-thread-body--comment-loader\" />\n    ) : (\n        <>{children}</>\n    );\n};\n\nconst CommentList: React.FC<{\n    comments: IMessageDTO[];\n    userState: IUserState;\n    onClose: (isResolved?: boolean) => void;\n    handleOnSaveRef: React.MutableRefObject<any>;\n    editComment: string;\n    fetchingMore: boolean;\n}> = ({\n    comments,\n    userState,\n    onClose,\n    handleOnSaveRef,\n    editComment,\n    fetchingMore,\n}) => {\n    return (\n        <div\n            className={classNames(\n                \"collab-thread-comment--list\",\n                collabStyles()[\"collab-thread-comment--list\"]\n            )}\n            id=\"collab-thread-comment--list\"\n        >\n            {comments?.map((comment: IMessageDTO) => (\n                <>\n                    <div\n                        className={classNames(\n                            \"collab-thread-comment-seperator\",\n                            \"flex-v-center\",\n                            collabStyles()[\"collab-thread-comment-seperator\"],\n                            flexAlignCenter\n                        )}\n                    >\n                        <svg\n                            class=\"collab-thread-comment-seperator--svg\"\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"100%\"\n                            height=\"2\"\n                            viewBox=\"0 0 332 2\"\n                            fill=\"none\"\n                            preserveAspectRatio=\"none\"\n                        >\n                            <path\n                                d=\"M0 1H332\"\n                                stroke=\"#DDE3EE\"\n                                strokeDasharray=\"2 2\"\n                            />\n                        </svg>\n                    </div>\n                    <CommentCard\n                        userState={userState}\n                        comment={comment}\n                        onClose={onClose}\n                        handleOnSaveRef={handleOnSaveRef}\n                        mode={editComment === comment._id ? \"edit\" : \"view\"}\n                    />\n                </>\n            ))}\n            {fetchingMore && <ThreadBodyLoader />}\n        </div>\n    );\n};\n\nconst ThreadBody: React.FC<IThreadBody> = React.memo(\n    ({\n        handleOnSaveRef,\n        onClose,\n        userState,\n        isLoading,\n        comments,\n        fetchingMore,\n        editComment,\n    }) => {\n        return (\n            <div\n                className={classNames(\n                    \"collab-thread-body--wrapper\",\n                    collabStyles()[\"collab-thread-body--wrapper\"]\n                )}\n            >\n                <Loader isLoading={isLoading}>\n                    <CommentList\n                        comments={comments}\n                        userState={userState}\n                        onClose={onClose}\n                        handleOnSaveRef={handleOnSaveRef}\n                        editComment={editComment}\n                        fetchingMore={fetchingMore}\n                    />\n                </Loader>\n\n                {editComment === \"\" && (\n                    <CommentCard\n                        userState={userState}\n                        comment={null}\n                        onClose={onClose}\n                        handleOnSaveRef={handleOnSaveRef}\n                        mode=\"edit\"\n                    />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default ThreadBody;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAkB;AAElB,wBAA6B;AAC7B,yBAAwB;AACxB,wBAAuB;AACvB,oBAA8C;AAKtC;AAFR,IAAM,SAA2C,CAAC,EAAE,WAAW,SAAS,MAAM;AAC1E,SAAO,YACH,4CAAC,kBAAAA,SAAA,IAAqB,oCAAqC,IAE3D,2EAAG,UAAS;AAEpB;AAEA,IAAM,cAOD,CAAC;AAAA,EACF;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,MAAM;AACF,SACI;AAAA,IAAC;AAAA;AAAA,MACG,eAAW,kBAAAC;AAAA,QACP;AAAA,YACA,4BAAa,EAAE,6BAA6B;AAAA,MAChD;AAAA,MACA,IAAG;AAAA,MAEF;AAAA,6CAAU,IAAI,CAAC,YACZ,4EACI;AAAA;AAAA,YAAC;AAAA;AAAA,cACG,eAAW,kBAAAA;AAAA,gBACP;AAAA,gBACA;AAAA,oBACA,4BAAa,EAAE,iCAAiC;AAAA,gBAChD;AAAA,cACJ;AAAA,cAEA;AAAA,gBAAC;AAAA;AAAA,kBACG,OAAM;AAAA,kBACN,OAAM;AAAA,kBACN,OAAM;AAAA,kBACN,QAAO;AAAA,kBACP,SAAQ;AAAA,kBACR,MAAK;AAAA,kBACL,qBAAoB;AAAA,kBAEpB;AAAA,oBAAC;AAAA;AAAA,sBACG,GAAE;AAAA,sBACF,QAAO;AAAA,sBACP,iBAAgB;AAAA;AAAA,kBACpB;AAAA;AAAA,cACJ;AAAA;AAAA,UACJ;AAAA,UACA;AAAA,YAAC,mBAAAC;AAAA,YAAA;AAAA,cACG;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,MAAM,gBAAgB,QAAQ,MAAM,SAAS;AAAA;AAAA,UACjD;AAAA,WACJ;AAAA,QAEH,gBAAgB,4CAAC,kBAAAF,SAAA,EAAiB;AAAA;AAAA;AAAA,EACvC;AAER;AAEA,IAAM,aAAoC,cAAAG,QAAM;AAAA,EAC5C,CAAC;AAAA,IACG;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,MAAM;AACF,WACI;AAAA,MAAC;AAAA;AAAA,QACG,eAAW,kBAAAF;AAAA,UACP;AAAA,cACA,4BAAa,EAAE,6BAA6B;AAAA,QAChD;AAAA,QAEA;AAAA,sDAAC,UAAO,WACJ;AAAA,YAAC;AAAA;AAAA,cACG;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA;AAAA,UACJ,GACJ;AAAA,UAEC,gBAAgB,MACb;AAAA,YAAC,mBAAAC;AAAA,YAAA;AAAA,cACG;AAAA,cACA,SAAS;AAAA,cACT;AAAA,cACA;AAAA,cACA,MAAK;AAAA;AAAA,UACT;AAAA;AAAA;AAAA,IAER;AAAA,EAER;AACJ;AAEA,IAAO,qBAAQ;","names":["ThreadBodyLoader","classNames","CommentCard","React"]}