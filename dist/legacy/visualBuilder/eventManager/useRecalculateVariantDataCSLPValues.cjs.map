{"version":3,"sources":["../../../../src/visualBuilder/eventManager/useRecalculateVariantDataCSLPValues.ts"],"sourcesContent":["import { VisualBuilder } from \"..\";\nimport livePreviewPostMessage from \"../../livePreview/eventManager/livePreviewEventManager\";\nimport { LIVE_PREVIEW_POST_MESSAGE_EVENTS } from \"../../livePreview/eventManager/livePreviewEventManager.constant\";\nimport { DATA_CSLP_ATTR_SELECTOR } from \"../utils/constants\";\nimport { visualBuilderStyles } from \"../visualBuilder.style\";\n\nconst VARIANT_UPDATE_DELAY_MS: Readonly<number> = 8000;\n\ntype OnAudienceModeVariantPatchUpdate = {\n    highlightVariantFields: boolean;\n    expectedCSLPValues: Record<\"variant\" | \"base\", string>;\n};\n\n/**\n * Registers a post message event listener for updating the variant / base classes in the live preview for audience mode.\n */\nexport function useRecalculateVariantDataCSLPValues(): void {\n    livePreviewPostMessage?.on<OnAudienceModeVariantPatchUpdate>(\n        LIVE_PREVIEW_POST_MESSAGE_EVENTS.VARIANT_PATCH,\n        (event) => {\n            if (VisualBuilder.VisualBuilderGlobalState.value.audienceMode) {\n                updateVariantClasses(event.data);\n            }\n        }\n    );\n}\nfunction updateVariantClasses({\n    highlightVariantFields,\n    expectedCSLPValues,\n}: OnAudienceModeVariantPatchUpdate): void {\n    const variant = VisualBuilder.VisualBuilderGlobalState.value.variant;\n    const observers: MutationObserver[] = [];\n\n    // Helper function to update element classes\n    const updateElementClasses = (\n        element: HTMLElement,\n        dataCslp: string,\n        observer: MutationObserver\n    ) => {\n        if (!dataCslp) return;\n\n        if (\n            dataCslp.startsWith(\"v2:\") &&\n            element.classList.contains(\"visual-builder__base-field\")\n        ) {\n            element.classList.remove(\"visual-builder__base-field\");\n            if (highlightVariantFields) {\n                element.classList.add(\n                    visualBuilderStyles()[\"visual-builder__variant-field\"],\n                    \"visual-builder__variant-field\"\n                );\n            } else {\n                element.classList.add(\"visual-builder__variant-field\");\n            }\n        } else if (\n            !dataCslp.startsWith(\"v2:\") &&\n            element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            element.classList.remove(\n                visualBuilderStyles()[\"visual-builder__variant-field\"],\n                \"visual-builder__variant-field\"\n            );\n            element.classList.add(\"visual-builder__base-field\");\n        } else if (\n            dataCslp.startsWith(\"v2:\") &&\n            variant &&\n            !dataCslp.includes(variant) &&\n            element.classList.contains(\"visual-builder__variant-field\")\n        ) {\n            element.classList.remove(\n                visualBuilderStyles()[\"visual-builder__variant-field\"],\n                \"visual-builder__variant-field\"\n            );\n            element.classList.add(\"visual-builder__disabled-variant-field\");\n        }\n\n        // Disconnect this observer after processing\n        observer.disconnect();\n        const index = observers.indexOf(observer);\n        if (index > -1) {\n            observers.splice(index, 1);\n        }\n    };\n\n    // Create a separate observer for each element\n    const elementsWithCslp = document.querySelectorAll(\n        `[${DATA_CSLP_ATTR_SELECTOR}]`\n    );\n\n    elementsWithCslp.forEach((elementNode) => {\n        const element = elementNode as HTMLElement;\n\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (\n                    mutation.type === \"attributes\" &&\n                    mutation.attributeName === DATA_CSLP_ATTR_SELECTOR\n                ) {\n                    const dataCslp = element.getAttribute(\n                        DATA_CSLP_ATTR_SELECTOR\n                    );\n                    updateElementClasses(element, dataCslp || \"\", observer);\n                }\n            });\n        });\n\n        observers.push(observer);\n        observer.observe(element, { attributes: true });\n    });\n\n    setTimeout(() => {\n        if (observers.length > 0) {\n            observers.forEach((observer) => observer.disconnect());\n            observers.length = 0;\n        }\n    }, VARIANT_UPDATE_DELAY_MS);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA8B;AAC9B,qCAAmC;AACnC,IAAAA,kCAAiD;AACjD,uBAAwC;AACxC,2BAAoC;AAEpC,IAAM,0BAA4C;AAU3C,SAAS,sCAA4C;AAhB5D;AAiBI,uCAAAC,YAAA,mBAAwB;AAAA,IACpB,iEAAiC;AAAA,IACjC,CAAC,UAAU;AACP,UAAI,uBAAc,yBAAyB,MAAM,cAAc;AAC3D,6BAAqB,MAAM,IAAI;AAAA,MACnC;AAAA,IACJ;AAAA;AAER;AACA,SAAS,qBAAqB;AAAA,EAC1B;AAAA,EACA;AACJ,GAA2C;AACvC,QAAM,UAAU,uBAAc,yBAAyB,MAAM;AAC7D,QAAM,YAAgC,CAAC;AAGvC,QAAM,uBAAuB,CACzB,SACA,UACA,aACC;AACD,QAAI,CAAC,SAAU;AAEf,QACI,SAAS,WAAW,KAAK,KACzB,QAAQ,UAAU,SAAS,4BAA4B,GACzD;AACE,cAAQ,UAAU,OAAO,4BAA4B;AACrD,UAAI,wBAAwB;AACxB,gBAAQ,UAAU;AAAA,cACd,0CAAoB,EAAE,+BAA+B;AAAA,UACrD;AAAA,QACJ;AAAA,MACJ,OAAO;AACH,gBAAQ,UAAU,IAAI,+BAA+B;AAAA,MACzD;AAAA,IACJ,WACI,CAAC,SAAS,WAAW,KAAK,KAC1B,QAAQ,UAAU,SAAS,+BAA+B,GAC5D;AACE,cAAQ,UAAU;AAAA,YACd,0CAAoB,EAAE,+BAA+B;AAAA,QACrD;AAAA,MACJ;AACA,cAAQ,UAAU,IAAI,4BAA4B;AAAA,IACtD,WACI,SAAS,WAAW,KAAK,KACzB,WACA,CAAC,SAAS,SAAS,OAAO,KAC1B,QAAQ,UAAU,SAAS,+BAA+B,GAC5D;AACE,cAAQ,UAAU;AAAA,YACd,0CAAoB,EAAE,+BAA+B;AAAA,QACrD;AAAA,MACJ;AACA,cAAQ,UAAU,IAAI,wCAAwC;AAAA,IAClE;AAGA,aAAS,WAAW;AACpB,UAAM,QAAQ,UAAU,QAAQ,QAAQ;AACxC,QAAI,QAAQ,IAAI;AACZ,gBAAU,OAAO,OAAO,CAAC;AAAA,IAC7B;AAAA,EACJ;AAGA,QAAM,mBAAmB,SAAS;AAAA,IAC9B,IAAI,wCAAuB;AAAA,EAC/B;AAEA,mBAAiB,QAAQ,CAAC,gBAAgB;AACtC,UAAM,UAAU;AAEhB,UAAM,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACjD,gBAAU,QAAQ,CAAC,aAAa;AAC5B,YACI,SAAS,SAAS,gBAClB,SAAS,kBAAkB,0CAC7B;AACE,gBAAM,WAAW,QAAQ;AAAA,YACrB;AAAA,UACJ;AACA,+BAAqB,SAAS,YAAY,IAAI,QAAQ;AAAA,QAC1D;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAED,cAAU,KAAK,QAAQ;AACvB,aAAS,QAAQ,SAAS,EAAE,YAAY,KAAK,CAAC;AAAA,EAClD,CAAC;AAED,aAAW,MAAM;AACb,QAAI,UAAU,SAAS,GAAG;AACtB,gBAAU,QAAQ,CAAC,aAAa,SAAS,WAAW,CAAC;AACrD,gBAAU,SAAS;AAAA,IACvB;AAAA,EACJ,GAAG,uBAAuB;AAC9B;","names":["import_livePreviewEventManager","livePreviewPostMessage"]}