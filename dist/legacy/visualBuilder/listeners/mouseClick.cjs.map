{"version":3,"sources":["../../../../src/visualBuilder/listeners/mouseClick.ts"],"sourcesContent":["import {\n    cleanIndividualFieldResidual,\n    handleIndividualFields,\n} from \"../utils/handleIndividualFields\";\n\nimport {\n    getCsDataOfElement,\n    getDOMEditStack,\n} from \"../utils/getCsDataOfElement\";\n\nimport { appendFocusedToolbar } from \"../generators/generateToolbar\";\n\nimport { addFocusOverlay, hideOverlay } from \"../generators/generateOverlay\";\n\nimport visualBuilderPostMessage from \"../utils/visualBuilderPostMessage\";\n\nimport { VisualBuilderPostMessageEvents } from \"../utils/types/postMessage.types\";\n\nimport { VisualBuilder } from \"..\";\nimport { FieldSchemaMap } from \"../utils/fieldSchemaMap\";\nimport { isFieldDisabled } from \"../utils/isFieldDisabled\";\nimport EventListenerHandlerParams from \"./types\";\nimport { toggleHighlightedCommentIconDisplay } from \"../generators/generateHighlightedComment\";\n\ntype HandleBuilderInteractionParams = Omit<\n    EventListenerHandlerParams,\n    \"eventDetails\" | \"customCursor\"\n>;\n\ntype AddFocusOverlayParams = Pick<\n    EventListenerHandlerParams,\n    \"overlayWrapper\" | \"resizeObserver\"\n> & { editableElement: Element; isFieldDisabled?: boolean };\n\ntype AddFocusedToolbarParams = Pick<\n    EventListenerHandlerParams,\n    \"eventDetails\" | \"focusedToolbar\"\n> & { hideOverlay: () => void };\n\nfunction addOverlay(params: AddFocusOverlayParams) {\n    if (!params.overlayWrapper || !params.editableElement) return;\n\n    addFocusOverlay(\n        params.editableElement,\n        params.overlayWrapper,\n        params.isFieldDisabled\n    );\n    params.resizeObserver.observe(params.editableElement);\n}\n\nexport function addFocusedToolbar(params: AddFocusedToolbarParams): void {\n    const { editableElement } = params.eventDetails;\n\n    if (!editableElement || !params.focusedToolbar) return;\n\n    appendFocusedToolbar(params.eventDetails, params.focusedToolbar, params.hideOverlay);\n}\n\nasync function handleBuilderInteraction(\n    params: HandleBuilderInteractionParams\n): Promise<void> {\n    const eventTarget = params.event.target as HTMLElement | null;\n    const isAnchorElement = eventTarget instanceof HTMLAnchorElement;\n    const elementHasCslp =\n        eventTarget &&\n        (eventTarget.hasAttribute(\"data-cslp\") ||\n            eventTarget.closest(\"[data-cslp]\"));\n\n    // prevent default behavior for anchor elements and elements with cslp attribute\n    if (\n        isAnchorElement ||\n        (elementHasCslp && !eventTarget.closest(\".visual-builder__empty-block\"))\n    ) {\n        params.event.preventDefault();\n        params.event.stopPropagation();\n    }\n\n    const eventDetails = getCsDataOfElement(params.event);\n    visualBuilderPostMessage\n        ?.send(VisualBuilderPostMessageEvents.MOUSE_CLICK, {\n            cslpData: eventDetails?.cslpData,\n            fieldMetadata: eventDetails?.fieldMetadata,\n        })\n        .catch((err) => {\n            console.warn(\"Error while sending post message\", err);\n        });\n    if (\n        !eventDetails ||\n        !params.overlayWrapper ||\n        !params.visualBuilderContainer\n    ) {\n        return;\n    }\n    const { editableElement, fieldMetadata } = eventDetails;\n\n    if (\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM &&\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM !== editableElement\n    ) {\n        cleanIndividualFieldResidual({\n            overlayWrapper: params.overlayWrapper,\n            visualBuilderContainer: params.visualBuilderContainer,\n            focusedToolbar: params.focusedToolbar,\n            resizeObserver: params.resizeObserver,\n        });\n    }\n\n    // if the selected element is our empty block element, return\n    if (\n        editableElement.classList.contains(\n            \"visual-builder__empty-block-parent\"\n        ) ||\n        editableElement.classList.contains(\"visual-builder__empty-block\")\n    ) {\n        return;\n    }\n\n    // when previous and current selected element is same, return.\n    // this also avoids inserting psuedo-editable field (field data is\n    // not equal to text content in DOM) when performing mouse\n    // selections in the content editable\n    const previousSelectedElement =\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM;\n    if (\n        previousSelectedElement &&\n        previousSelectedElement === editableElement\n    ) {\n        return;\n    }\n\n    VisualBuilder.VisualBuilderGlobalState.value.previousSelectedEditableDOM =\n        editableElement;\n\n    addOverlay({\n        overlayWrapper: params.overlayWrapper,\n        resizeObserver: params.resizeObserver,\n        editableElement: editableElement,\n    });\n\n    addFocusedToolbar({\n        eventDetails: eventDetails,\n        focusedToolbar: params.focusedToolbar,\n        hideOverlay: () => {\n            hideOverlay({\n                visualBuilderContainer: params.visualBuilderContainer,\n                visualBuilderOverlayWrapper: params.overlayWrapper,\n                focusedToolbar: params.focusedToolbar,\n                resizeObserver: params.resizeObserver,\n            });\n        }\n    });\n\n    const { content_type_uid, fieldPath, cslpValue } = fieldMetadata;\n\n    toggleHighlightedCommentIconDisplay(cslpValue, false);\n\n    const fieldSchema = await FieldSchemaMap.getFieldSchema(\n        content_type_uid,\n        fieldPath\n    );\n\n    if (fieldSchema) {\n        // after field schema is available re-add disabled overlay\n        const { isDisabled } = isFieldDisabled(fieldSchema, eventDetails);\n        if (isDisabled) {\n            addOverlay({\n                overlayWrapper: params.overlayWrapper,\n                resizeObserver: params.resizeObserver,\n                editableElement: editableElement,\n                isFieldDisabled: true,\n            });\n        }\n    }\n\n    // This is most probably redundant code, as the handleIndividualFields function\n    // takes care of this\n    // TODO: Remove this\n    // if (\n    //     fieldSchema.data_type === \"block\" ||\n    //     fieldSchema.multiple ||\n    //     (fieldSchema.data_type === \"reference\" &&\n    //         // @ts-ignore\n    //         fieldSchema.field_metadata.ref_multiple)\n    // ) {\n    //     handleAddButtonsForMultiple(eventDetails, {\n    //         editableElement: editableElement,\n    //         visualBuilderContainer: params.visualBuilderContainer,\n    //         resizeObserver: params.resizeObserver,\n    //     });\n    // } else {\n    //     removeAddInstanceButtons({\n    //         eventTarget: params.event.target,\n    //         visualBuilderContainer: params.visualBuilderContainer,\n    //         overlayWrapper: params.overlayWrapper,\n    //     });\n    // }\n    visualBuilderPostMessage?.send(VisualBuilderPostMessageEvents.FOCUS_FIELD, {\n        DOMEditStack: getDOMEditStack(editableElement),\n    });\n\n    await handleIndividualFields(eventDetails, {\n        visualBuilderContainer: params.visualBuilderContainer,\n        resizeObserver: params.resizeObserver,\n        lastEditedField: previousSelectedElement,\n    });\n}\n\nexport default handleBuilderInteraction;\n"],"mappings":"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","names":["visualBuilderPostMessage"]}