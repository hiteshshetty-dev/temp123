{"version":3,"sources":["../../../../src/visualBuilder/listeners/mouseClick.ts"],"sourcesContent":["import {\n    cleanIndividualFieldResidual,\n    handleIndividualFields,\n} from \"../utils/handleIndividualFields\";\n\nimport {\n    getCsDataOfElement,\n    getDOMEditStack,\n} from \"../utils/getCsDataOfElement\";\n\nimport { appendFocusedToolbar } from \"../generators/generateToolbar\";\n\nimport { addFocusOverlay, hideOverlay } from \"../generators/generateOverlay\";\n\nimport visualBuilderPostMessage from \"../utils/visualBuilderPostMessage\";\n\nimport { VisualBuilderPostMessageEvents } from \"../utils/types/postMessage.types\";\n\nimport { VisualBuilder } from \"..\";\nimport { FieldSchemaMap } from \"../utils/fieldSchemaMap\";\nimport { isFieldDisabled } from \"../utils/isFieldDisabled\";\nimport EventListenerHandlerParams from \"./types\";\nimport { toggleHighlightedCommentIconDisplay } from \"../generators/generateHighlightedComment\";\nimport { VB_EmptyBlockParentClass } from \"../..\";\nimport { getFieldVariantStatus } from \"../components/FieldRevert/FieldRevertComponent\";\nimport getXPath from \"get-xpath\";\nimport Config from \"../../configManager/configManager\";\nimport { generateThread } from \"../generators/generateThread\";\nimport { isCollabThread } from \"../generators/generateThread\";\nimport { toggleCollabPopup } from \"../generators/generateThread\";\nimport { fixSvgXPath } from \"../utils/collabUtils\";\nimport { v4 as uuidV4 } from \"uuid\";\nimport { getEntryPermissionsCached } from \"../utils/getEntryPermissionsCached\";\n\ntype HandleBuilderInteractionParams = Omit<\n    EventListenerHandlerParams,\n    \"eventDetails\" | \"customCursor\"\n> & { reEvaluate?: boolean };\n\ntype AddFocusOverlayParams = Pick<\n    EventListenerHandlerParams,\n    \"overlayWrapper\" | \"resizeObserver\"\n> & { editableElement: Element; isFieldDisabled?: boolean };\n\ntype AddFocusedToolbarParams = Pick<\n    EventListenerHandlerParams,\n    \"eventDetails\" | \"focusedToolbar\"\n> & { hideOverlay: () => void; isVariant: boolean };\n\nfunction addOverlay(params: AddFocusOverlayParams) {\n    if (!params.overlayWrapper || !params.editableElement) return;\n\n    addFocusOverlay(\n        params.editableElement,\n        params.overlayWrapper,\n        params.isFieldDisabled\n    );\n    params.resizeObserver.observe(params.editableElement);\n}\n\nexport function addFocusedToolbar(params: AddFocusedToolbarParams): void {\n    const { editableElement } = params.eventDetails;\n\n    if (!editableElement || !params.focusedToolbar) return;\n\n    appendFocusedToolbar(\n        params.eventDetails,\n        params.focusedToolbar,\n        params.hideOverlay,\n        params.isVariant\n    );\n}\n\nasync function handleBuilderInteraction(\n    params: HandleBuilderInteractionParams\n): Promise<void> {\n    const eventTarget = params.event.target as HTMLElement | null;\n    const isAnchorElement = eventTarget instanceof HTMLAnchorElement;\n    const elementHasCslp =\n        eventTarget &&\n        (eventTarget.hasAttribute(\"data-cslp\") ||\n            eventTarget.closest(\"[data-cslp]\"));\n\n    // if multiple elements with the same cslp element are found,\n    // assign a unique ID to each element which we can use to identify\n    // them in updateFocussedState and other places where we\n    // would have queried the element by data-cslp\n    const duplicates = document.querySelectorAll(\n        `[data-cslp=\"${eventTarget?.getAttribute(\"data-cslp\")}\"]`\n    );\n    if (duplicates.length > 1) {\n        duplicates.forEach((ele) => {\n            if (!ele.hasAttribute(\"data-cslp-unique-id\")) {\n                const uniqueId = `cslp-${uuidV4()}`;\n                ele.setAttribute(\"data-cslp-unique-id\", uniqueId);\n            }\n        });\n    }\n\n    // if the target element is a studio-ui element, return\n    // this is currently used for the \"Edit in Studio\" button\n    if (eventTarget?.getAttribute(\"data-studio-ui\") === \"true\") {\n        return;\n    }\n\n    if (params.event.altKey) {\n        if (isAnchorElement) {\n            params.event.preventDefault();\n            params.event.stopPropagation();\n        }\n        return;\n    }\n    // prevent default behavior for anchor elements and elements with cslp attribute\n    if (\n        isAnchorElement ||\n        (elementHasCslp && !eventTarget.closest(\".visual-builder__empty-block\"))\n    ) {\n        params.event.preventDefault();\n        params.event.stopPropagation();\n    }\n\n    const config = Config.get();\n\n    if (config?.collab.enable === true) {\n        if (config?.collab.pauseFeedback) return;\n        const xpath = fixSvgXPath(getXPath(eventTarget));\n        if (!eventTarget) return;\n\n        const rect = eventTarget.getBoundingClientRect();\n        const relativeX = (params.event.clientX - rect.left) / rect.width;\n        const relativeY = (params.event.clientY - rect.top) / rect.height;\n\n        if (!isCollabThread(eventTarget)) {\n            params.event.preventDefault();\n            params.event.stopPropagation();\n        }\n\n        if (isCollabThread(eventTarget)) {\n            Config.set(\"collab.isFeedbackMode\", false);\n        } else if (config?.collab.isFeedbackMode) {\n            generateThread(\n                { xpath, relativeX, relativeY },\n                {\n                    isNewThread: true,\n                    updateConfig: true,\n                }\n            );\n        } else {\n            toggleCollabPopup({ threadUid: \"\", action: \"close\" });\n            Config.set(\"collab.isFeedbackMode\", true);\n        }\n        return;\n    }\n\n    const eventDetails = getCsDataOfElement(params.event);\n\n    // Send mouse click post message\n    sendMouseClickPostMessage(eventDetails);\n\n    if (\n        !eventDetails ||\n        !params.overlayWrapper ||\n        !params.visualBuilderContainer\n    ) {\n        return;\n    }\n\n    const { editableElement, fieldMetadata } = eventDetails;\n    const variantStatus = await getFieldVariantStatus(fieldMetadata);\n    const isVariant = variantStatus\n        ? Object.values(variantStatus).some((value) => value === true)\n        : false;\n\n    // Clean residuals if necessary\n    cleanResidualsIfNeeded(params, editableElement);\n\n    // Return if the selected element is an empty block\n    if (isEmptyBlockElement(editableElement)) {\n        return;\n    }\n\n    // when previous and current selected element is same, return.\n    // this also avoids inserting psuedo-editable field (field data is\n    // not equal to text content in DOM) when performing mouse\n    // selections in the content editable\n    const previousSelectedElement =\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM;\n    if (\n        isSameSelectedElement(previousSelectedElement, editableElement, params)\n    ) {\n        return;\n    }\n\n    VisualBuilder.VisualBuilderGlobalState.value.previousSelectedEditableDOM =\n        editableElement;\n\n    // Add overlay and focused toolbar\n    addOverlayAndToolbar(params, eventDetails, editableElement, isVariant);\n\n    const { cslpValue } = fieldMetadata;\n\n    toggleHighlightedCommentIconDisplay(cslpValue, false);\n\n    // Handle field schema and individual fields\n    await handleFieldSchemaAndIndividualFields(\n        params,\n        eventDetails,\n        fieldMetadata,\n        editableElement,\n        previousSelectedElement\n    );\n\n    // Observe changes to the editable element\n    observeEditableElementChanges(params, editableElement);\n}\n\nfunction sendMouseClickPostMessage(eventDetails: any) {\n    visualBuilderPostMessage\n        ?.send(VisualBuilderPostMessageEvents.MOUSE_CLICK, {\n            cslpData: eventDetails?.cslpData,\n            fieldMetadata: eventDetails?.fieldMetadata,\n        })\n        .catch((err) => {\n            console.warn(\"Error while sending post message\", err);\n        });\n}\nfunction cleanResidualsIfNeeded(\n    params: HandleBuilderInteractionParams,\n    editableElement: Element\n) {\n    const previousSelectedElement =\n        VisualBuilder.VisualBuilderGlobalState.value\n            .previousSelectedEditableDOM;\n    if (\n        (previousSelectedElement &&\n            previousSelectedElement !== editableElement) ||\n        params.reEvaluate\n    ) {\n        cleanIndividualFieldResidual({\n            overlayWrapper: params.overlayWrapper!,\n            visualBuilderContainer: params.visualBuilderContainer,\n            focusedToolbar: params.focusedToolbar,\n            resizeObserver: params.resizeObserver,\n        });\n    }\n}\nfunction isEmptyBlockElement(editableElement: Element): boolean {\n    return (\n        editableElement.classList.contains(VB_EmptyBlockParentClass) ||\n        editableElement.classList.contains(\"visual-builder__empty-block\")\n    );\n}\n\nfunction isSameSelectedElement(\n    previousSelectedElement: Element | null,\n    editableElement: Element,\n    params: HandleBuilderInteractionParams\n): boolean {\n    return !!(\n        previousSelectedElement &&\n        previousSelectedElement === editableElement &&\n        !params.reEvaluate\n    );\n}\n\nfunction addOverlayAndToolbar(\n    params: HandleBuilderInteractionParams,\n    eventDetails: any,\n    editableElement: Element,\n    isVariant: boolean\n) {\n    addOverlay({\n        overlayWrapper: params.overlayWrapper,\n        resizeObserver: params.resizeObserver,\n        editableElement: editableElement,\n    });\n\n    addFocusedToolbar({\n        eventDetails: eventDetails,\n        focusedToolbar: params.focusedToolbar,\n        hideOverlay: () => {\n            hideOverlay({\n                visualBuilderContainer: params.visualBuilderContainer,\n                visualBuilderOverlayWrapper: params.overlayWrapper,\n                focusedToolbar: params.focusedToolbar,\n                resizeObserver: params.resizeObserver,\n            });\n        },\n        isVariant,\n    });\n}\nasync function handleFieldSchemaAndIndividualFields(\n    params: HandleBuilderInteractionParams,\n    eventDetails: any,\n    fieldMetadata: any,\n    editableElement: Element,\n    previousSelectedElement: Element | null\n) {\n    const { content_type_uid, entry_uid, fieldPath, locale } = fieldMetadata;\n    const fieldSchema = await FieldSchemaMap.getFieldSchema(\n        content_type_uid,\n        fieldPath\n    );\n    const entryAcl = await getEntryPermissionsCached({\n        entryUid: entry_uid,\n        contentTypeUid: content_type_uid,\n        locale,\n    });\n\n    if (fieldSchema) {\n        const { isDisabled } = isFieldDisabled(\n            fieldSchema,\n            eventDetails,\n            entryAcl\n        );\n        if (isDisabled) {\n            addOverlay({\n                overlayWrapper: params.overlayWrapper,\n                resizeObserver: params.resizeObserver,\n                editableElement: editableElement,\n                isFieldDisabled: true,\n            });\n        }\n    }\n\n    visualBuilderPostMessage?.send(VisualBuilderPostMessageEvents.FOCUS_FIELD, {\n        DOMEditStack: getDOMEditStack(editableElement),\n    });\n\n    await handleIndividualFields(eventDetails, {\n        visualBuilderContainer: params.visualBuilderContainer!,\n        resizeObserver: params.resizeObserver,\n        lastEditedField: previousSelectedElement,\n    });\n}\nfunction observeEditableElementChanges(\n    params: HandleBuilderInteractionParams,\n    editableElement: Element\n) {\n    const focusElementObserver = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            if (\n                mutation.type === \"attributes\" &&\n                mutation.attributeName === \"data-cslp\"\n            ) {\n                focusElementObserver?.disconnect();\n                VisualBuilder.VisualBuilderGlobalState.value.focusElementObserver =\n                    null;\n                handleBuilderInteraction({ ...params, reEvaluate: true });\n            }\n        });\n    });\n\n    VisualBuilder.VisualBuilderGlobalState.value.focusElementObserver =\n        focusElementObserver;\n    focusElementObserver.observe(editableElement, { attributes: true });\n}\n\nexport default handleBuilderInteraction;\n"],"mappings":"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","names":[]}